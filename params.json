{"name":"Arithcode","body":"# Arithmetic Coding\r\nby @nclack.\r\n\r\n## Introduction\r\n\r\nImplementation after Amir Said's Algorithms 22-29([1]).  This was mostly a\r\nlearning excersize.  It hasn't been optimized.\r\n      \r\n## Features\r\n\r\n  - Encoding/decoding to/from variable symbol alphabets.\r\n\r\n  - Implicit use of a STOP symbol means that you don't need to know the number of symbols in the decoded message in order\r\n    to decode something.\r\n\r\n  - Can encoded messages stored as signed or unsigned chars, shorts, longs or long longs.  Keep in mind, however, that the\r\n    number of encodable symbols may be limiting.  You can't encode 2^64 different integers, sorry.\r\n\r\n  - Can encode to streams of variable symbol width; either 1,4,8, or 16 bits.  There is are two tradeoffs here.\r\n\r\n      - Smaller bit-width (e.g. 1) give better compression than larger bit-width (e.g. 16), but compression is slower (I think?).\r\n\r\n      - The implimentation puts a limit on the smallest probability of an encoded symbol.  Smaller bit-width (e.g. 1) can accomidate\r\n        a larger range of probabilities than large bit-width (e.g. 16).\r\n        \r\n## Example\r\n\r\n```C\r\nvoid encode()\r\n{ unsigned char *input, *output=0;      // input and output buffer\r\n  size_t countof_input, countof_output; // number of symbols in input and output buffer\r\n  float *cdf=0;\r\n  size_t nsym;                          // number of symbols in the input alphabet\r\n  // somehow load the data into input array\r\n  cdf_build(&cdf,&nsym,input,countof_input);\r\n  encode_u1_u8(                         // encode unsigned chars to a string of bits (1 bit per output symbol)\r\n    (void**)&out,&countof_output,\r\n            input, countof_input,\r\n              cdf, nsym);\r\n  // do something with the output\r\n  free(out);\r\n  free(cdf);\r\n}\r\n```        \r\n\r\n## References\r\n\r\n[1]:  http://www.hpl.hp.com/techreports/2004/HPL-2004-76.pdf\r\n      Said, A. \"Introduction to Arithmetic Coding - Theory and Practice.\"\r\n      Hewlett Packard Laboratories Report: 2004-2076.      ","google":"","tagline":"Arithmetic coding in C","note":"Don't delete this file! It's used internally to help with page regeneration."}