
API Ideas
---------

- could refactor so that we keep track of encoder state in a struct allowing
  for progressive updates.  

  This would help with implementing the markov-chain stuff, since this amounts
  to flipping the cdf between symbols.

  Also, the state could keep track of other, optional, features.  For instace,
    
    1.  If some intermediate symbol translation was applied to sort symbols in
        probabillity order, the translation could be tracked internally.  

    2.  If the CDF was computed on the fly (rather than provided), a simplified
        interface could be provided.

  My current approach is to provide just the outer encode/decode.  The internal
  organization supports flexible stepwise encoding/decoding schemes.


TESTING
-------

- encode/decode random strings
  check for self consistency

- what are edge cases for inputs?
  e.g. what would require all the symbols to carry?


Thoughts
--------
- regarding variable symbol encode/decode

  - Use mutiple stages:
    
    vencode                               vdecode
    [ encode(cdf)-->decode(uniform) ] --> [ encode(uniform)-->decode(cdf) ] 
    
  - Problem:

    decode(uniform) needs to know when to stop producing symbols.
    The "end" symbol inserted by encode(cdf) won't be recognized.

    Approaches:
    
    1. run vdecode steps off of decode(uniform) output to test for when the
       end symbol is hit.

       - expensive: must run entire vdecode stage, essentially, in order to
         do an encoding.
       - eselect() never gets run on the encode(uniform) stage so there's a
         possibility that outstanding carries don't get propigated? 
         Can't say that I completely understand what's going on here.
       - Practically, the number of symbols determined with this method is 
         incorrect for some reason.  The position of the decode(uniform) stream
         is too small, the number of encoded symbols consumed by
         encode(uniform) is too great.

      - decode(cdf) might sometimes overflow the stream output by
        encode(uniform).  This would be an error.

     [x] Try running decode(uniform) until encode(uniform) produces as many symbols
         as output from encode(cdf).  Output from encode(cdf) and encode(uniform) stage
         should be the same.

         - Looks like it works!

- minimum probability limitations
  and other scaling with the number of symbols M.

  Should I sanitize the input CDF? 

  - Might be the best way of making things just work.
